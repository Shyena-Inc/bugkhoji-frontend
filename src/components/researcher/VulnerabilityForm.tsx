
import { useState } from 'react';
import { Bug } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import MarkdownEditor from './MarkdownEditor';
import FileUpload from './FileUpload';

interface VulnerabilityFormData {
  title: string;
  severity: string;
  url: string;
  tags: string;
  description: string;
  proofOfConcept: string;
  impact: string;
}

interface VulnerabilityFormProps {
  onSubmit: (data: VulnerabilityFormData) => void;
}

const VulnerabilityForm = ({ onSubmit }: VulnerabilityFormProps) => {
  const [formData, setFormData] = useState<VulnerabilityFormData>({
    title: '',
    severity: '',
    url: '',
    tags: '',
    description: '',
    proofOfConcept: '',
    impact: ''
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const handleSelectChange = (name: string, value: string) => {
    setFormData({
      ...formData,
      [name]: value
    });
  };

  const handleDescriptionChange = (value: string) => {
    setFormData({
      ...formData,
      description: value
    });
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Report submitted:', formData);
    onSubmit(formData);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <Bug className="mr-2 h-5 w-5" />
          Vulnerability Details
        </CardTitle>
      </CardHeader>
      
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="title">Vulnerability Title</Label>
              <Input
                id="title"
                name="title"
                placeholder="e.g., SQL Injection in User Search"
                value={formData.title}
                onChange={handleInputChange}
                required
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="severity">Severity Level</Label>
              <Select value={formData.severity} onValueChange={(value) => handleSelectChange('severity', value)}>
                <SelectTrigger>
                  <SelectValue placeholder="Select severity" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="low">Low</SelectItem>
                  <SelectItem value="medium">Medium</SelectItem>
                  <SelectItem value="high">High</SelectItem>
                  <SelectItem value="critical">Critical</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="url">Affected URL</Label>
              <Input
                id="url"
                name="url"
                type="url"
                placeholder="https://example.com/vulnerable-page"
                value={formData.url}
                onChange={handleInputChange}
                required
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="tags">Tags</Label>
              <Input
                id="tags"
                name="tags"
                placeholder="e.g., xss, authentication, csrf"
                value={formData.tags}
                onChange={handleInputChange}
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="description">Vulnerability Description</Label>
            <MarkdownEditor
              value={formData.description}
              onChange={handleDescriptionChange}
              placeholder="Describe the vulnerability in detail. You can use Markdown formatting..."
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="proofOfConcept">Proof of Concept</Label>
            <Textarea
              id="proofOfConcept"
              name="proofOfConcept"
              placeholder="Provide step-by-step instructions to reproduce the vulnerability..."
              className="min-h-[150px]"
              value={formData.proofOfConcept}
              onChange={handleInputChange}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="impact">Impact Assessment</Label>
            <Textarea
              id="impact"
              name="impact"
              placeholder="Explain the potential impact of this vulnerability..."
              className="min-h-[100px]"
              value={formData.impact}
              onChange={handleInputChange}
              required
            />
          </div>

          <FileUpload />

          <div className="flex justify-end space-x-4">
            <Button variant="outline" type="button">
              Save as Draft
            </Button>
            <Button type="submit" className="bg-blue-600 hover:bg-blue-700">
              Submit Report
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityForm;
