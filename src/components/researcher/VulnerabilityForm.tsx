import { useState } from 'react';
import { Bug } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import MarkdownEditor from './MarkdownEditor';
import FileUpload from './FileUpload';

interface VulnerabilityFormData {
  title: string;
  description: string;
  content: string;
  status: string;
  type: string;
  priority: string;
  programId: string;
  submissionId: string;
  tags: string[];
  isPublic: boolean;
  metadata: Record<string, any>;
  attachments: string[];
}

interface VulnerabilityFormProps {
  onSubmit: (data: VulnerabilityFormData) => void;
  programs?: Array<{ id: string; title: string }>;
  submissions?: Array<{ id: string; title: string }>;
}

const VulnerabilityForm = ({ onSubmit, programs = [], submissions = [] }: VulnerabilityFormProps) => {
  const [formData, setFormData] = useState<VulnerabilityFormData>({
    title: '',
    description: '',
    content: '',
    status: 'DRAFT',
    type: 'VULNERABILITY',
    priority: 'MEDIUM',
    programId: '',
    submissionId: 'none',
    tags: [],
    isPublic: false,
    metadata: {},
    attachments: []
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    
    if (name === 'tags') {
      // Convert comma-separated string to array
      const tagsArray = value.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);
      setFormData({
        ...formData,
        tags: tagsArray
      });
    } else {
      setFormData({
        ...formData,
        [name]: value
      });
    }
  };

  const handleSelectChange = (name: string, value: string) => {
    setFormData({
      ...formData,
      [name]: value
    });
  };

  const handleDescriptionChange = (value: string) => {
    setFormData({
      ...formData,
      description: value
    });
  };

  const handleMetadataChange = (key: string, value: string) => {
    setFormData({
      ...formData,
      metadata: {
        ...formData.metadata,
        [key]: value
      }
    });
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Convert form data to match backend expectations
    const submitData = {
      ...formData,
      submissionId: formData.submissionId === 'none' ? '' : formData.submissionId,
      content: formData.content || `
**Proof of Concept:**
${formData.metadata.proofOfConcept || ''}

**Impact Assessment:**
${formData.metadata.impact || ''}
      `.trim()
    };
    console.log('Report submitted:', submitData);
    onSubmit(submitData);
  };

  const handleSaveDraft = () => {
    const draftData = {
      ...formData,
      status: 'DRAFT'
    };
    onSubmit(draftData);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <Bug className="mr-2 h-5 w-5" />
          Vulnerability Details
        </CardTitle>
      </CardHeader>
      
      <CardContent>
        <div className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="title">Vulnerability Title</Label>
              <Input
                id="title"
                name="title"
                placeholder="e.g., SQL Injection in User Search"
                value={formData.title}
                onChange={handleInputChange}
                required
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="priority">Severity Level</Label>
              <Select value={formData.priority} onValueChange={(value) => handleSelectChange('priority', value)}>
                <SelectTrigger>
                  <SelectValue placeholder="Select severity" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="LOW">Low</SelectItem>
                  <SelectItem value="MEDIUM">Medium</SelectItem>
                  <SelectItem value="HIGH">High</SelectItem>
                  <SelectItem value="CRITICAL">Critical</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="programId">Bug Bounty Program</Label>
              <Select value={formData.programId} onValueChange={(value) => handleSelectChange('programId', value)}>
                <SelectTrigger>
                  <SelectValue placeholder="Select the program you're reporting to" />
                </SelectTrigger>
                <SelectContent>
                  {programs.length > 0 ? programs.map((program) => (
                    <SelectItem key={program.id} value={program.id}>
                      {program.title}
                    </SelectItem>
                  )) : (
                    <SelectItem value="no-programs" disabled>No programs available</SelectItem>
                  )}
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="submissionId">Related Submission (Optional)</Label>
              <Select value={formData.submissionId} onValueChange={(value) => handleSelectChange('submissionId', value)}>
                <SelectTrigger>
                  <SelectValue placeholder="Link to existing submission" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="none">None</SelectItem>
                  {submissions.length > 0 && submissions.map((submission) => (
                    <SelectItem key={submission.id} value={submission.id}>
                      {submission.title}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="url">Affected URL</Label>
              <Input
                id="url"
                name="url"
                type="url"
                placeholder="https://example.com/vulnerable-page"
                value={formData.metadata.affected_url || ''}
                onChange={(e) => handleMetadataChange('affected_url', e.target.value)}
                required
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="tags">Tags</Label>
              <Input
                id="tags"
                name="tags"
                placeholder="e.g., xss, authentication, csrf"
                value={formData.tags.join(', ')}
                onChange={handleInputChange}
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="description">Vulnerability Description</Label>
            <MarkdownEditor
              value={formData.description}
              onChange={handleDescriptionChange}
              placeholder="Describe the vulnerability in detail. You can use Markdown formatting..."
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="proofOfConcept">Proof of Concept</Label>
            <Textarea
              id="proofOfConcept"
              name="proofOfConcept"
              placeholder="Provide step-by-step instructions to reproduce the vulnerability..."
              className="min-h-[150px]"
              value={formData.metadata.proofOfConcept || ''}
              onChange={(e) => handleMetadataChange('proofOfConcept', e.target.value)}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="impact">Impact Assessment</Label>
            <Textarea
              id="impact"
              name="impact"
              placeholder="Explain the potential impact of this vulnerability..."
              className="min-h-[100px]"
              value={formData.metadata.impact || ''}
              onChange={(e) => handleMetadataChange('impact', e.target.value)}
              required
            />
          </div>

          {/* Hidden field for backend compatibility */}
          <div style={{ display: 'none' }}>
            <Select value={formData.type} onValueChange={(value) => handleSelectChange('type', value)}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="VULNERABILITY">Vulnerability</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <FileUpload />

          <div className="flex justify-end space-x-4">
            <Button variant="outline" type="button" onClick={handleSaveDraft}>
              Save as Draft
            </Button>
            <Button onClick={handleSubmit} className="bg-blue-600 hover:bg-blue-700">
              Submit Report
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityForm;