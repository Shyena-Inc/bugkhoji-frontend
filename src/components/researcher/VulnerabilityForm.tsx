import { useState } from 'react';
import { Bug, Upload, X, File } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import MarkdownEditor from './MarkdownEditor';

interface VulnerabilityFormData {
  title: string;
  description: string;
  content: string;
  status: string;
  type: string;
  priority: string;
  programId: string;
  submissionId: string;
  tags: string[];
  isPublic: boolean;
  metadata: Record<string, any>;
  attachments: File[];
}

interface VulnerabilityFormProps {
  onSubmit: (data: VulnerabilityFormData) => void;
  programs?: Array<{ id: string; title: string }>;
  submissions?: Array<{ id: string; title: string }>;
  isSubmitting?: boolean; // Add this prop
}

const VulnerabilityForm = ({ onSubmit, programs = [], isSubmitting = false }: VulnerabilityFormProps) => {
  const [formData, setFormData] = useState<VulnerabilityFormData>({
    title: '',
    description: '',
    content: '',
    status: 'DRAFT',
    type: 'VULNERABILITY',
    priority: 'MEDIUM',
    programId: '',
    submissionId: 'none',
    tags: [],
    isPublic: false,
    metadata: {},
    attachments: []
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    
    if (name === 'tags') {
      // Convert comma-separated string to array
      const tagsArray = value.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);
      setFormData({
        ...formData,
        tags: tagsArray
      });
    } else {
      setFormData({
        ...formData,
        [name]: value
      });
    }
  };

  const handleSelectChange = (name: string, value: string) => {
    setFormData({
      ...formData,
      [name]: value
    });
  };

  const handleDescriptionChange = (value: string) => {
    setFormData({
      ...formData,
      description: value
    });
  };

  const handleMetadataChange = (key: string, value: string) => {
    setFormData({
      ...formData,
      metadata: {
        ...formData.metadata,
        [key]: value
      }
    });
  };

  // File upload handlers
  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    if (files.length > 0) {
      setFormData({
        ...formData,
        attachments: [...formData.attachments, ...files]
      });
    }
    // Reset the input value to allow re-uploading the same file
    e.target.value = '';
  };

  const removeFile = (index: number) => {
    const newAttachments = formData.attachments.filter((_, i) => i !== index);
    setFormData({
      ...formData,
      attachments: newAttachments
    });
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (isSubmitting) return; // Prevent double submission
    
    // Convert form data to match backend expectations
    const submitData = {
      ...formData,
      submissionId: formData.submissionId === 'none' ? '' : formData.submissionId,
      content: formData.content || `
**Proof of Concept:**
${formData.metadata.proofOfConcept || ''}

**Impact Assessment:**
${formData.metadata.impact || ''}
      `.trim()
    };
    console.log('Report submitted:', submitData);
    onSubmit(submitData);
  };

  const handleSaveDraft = () => {
    if (isSubmitting) return; // Prevent double submission
    
    const draftData = {
      ...formData,
      status: 'DRAFT'
    };
    onSubmit(draftData);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <Bug className="mr-2 h-5 w-5" />
          Vulnerability Details
        </CardTitle>
      </CardHeader>
      
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="title">Vulnerability Title</Label>
              <Input
                id="title"
                name="title"
                placeholder="e.g., SQL Injection in User Search"
                value={formData.title}
                onChange={handleInputChange}
                disabled={isSubmitting}
                required
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="priority">Severity Level</Label>
              <Select 
                value={formData.priority} 
                onValueChange={(value) => handleSelectChange('priority', value)}
                disabled={isSubmitting}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select severity" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="LOW">Low</SelectItem>
                  <SelectItem value="MEDIUM">Medium</SelectItem>
                  <SelectItem value="HIGH">High</SelectItem>
                  <SelectItem value="CRITICAL">Critical</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="programId">Bug Bounty Program</Label>
              <Select 
                value={formData.programId} 
                onValueChange={(value) => handleSelectChange('programId', value)}
                disabled={isSubmitting}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select the program you're reporting to" />
                </SelectTrigger>
                <SelectContent>
                  {programs.length > 0 ? programs.map((program) => (
                    <SelectItem key={program.id} value={program.id}>
                      {program.title}
                    </SelectItem>
                  )) : (
                    <SelectItem value="no-programs" disabled>No programs available</SelectItem>
                  )}
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="url">Affected URL</Label>
              <Input
                id="url"
                name="url"
                type="url"
                placeholder="https://example.com/vulnerable-page"
                value={formData.metadata.affected_url || ''}
                onChange={(e) => handleMetadataChange('affected_url', e.target.value)}
                disabled={isSubmitting}
                required
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="tags">Tags</Label>
              <Input
                id="tags"
                name="tags"
                placeholder="e.g., xss, authentication, csrf"
                value={formData.tags.join(', ')}
                onChange={handleInputChange}
                disabled={isSubmitting}
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="description">Vulnerability Description</Label>
            <MarkdownEditor
              value={formData.description}
              onChange={handleDescriptionChange}
              placeholder="Describe the vulnerability in detail. You can use Markdown formatting..."
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="proofOfConcept">Proof of Concept</Label>
            <Textarea
              id="proofOfConcept"
              name="proofOfConcept"
              placeholder="Provide step-by-step instructions to reproduce the vulnerability..."
              className="min-h-[150px]"
              value={formData.metadata.proofOfConcept || ''}
              onChange={(e) => handleMetadataChange('proofOfConcept', e.target.value)}
              disabled={isSubmitting}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="impact">Impact Assessment</Label>
            <Textarea
              id="impact"
              name="impact"
              placeholder="Explain the potential impact of this vulnerability..."
              className="min-h-[100px]"
              value={formData.metadata.impact || ''}
              onChange={(e) => handleMetadataChange('impact', e.target.value)}
              disabled={isSubmitting}
              required
            />
          </div>

          {/* File Upload Section */}
          <div className="space-y-4">
            <Label htmlFor="attachments">Attachments</Label>
            <div className="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6">
              <div className="text-center">
                <Upload className="mx-auto h-12 w-12 text-gray-400" />
                <div className="mt-4">
                  <label htmlFor="file-upload" className="cursor-pointer">
                    <span className="mt-2 block text-sm font-medium text-gray-900 dark:text-white">
                      Upload proof files (screenshots, videos, etc.)
                    </span>
                    <input
                      id="file-upload"
                      name="file-upload"
                      type="file"
                      className="sr-only"
                      multiple
                      accept=".jpg,.jpeg,.png,.gif,.pdf,.txt,.zip,.mp4,.mov"
                      onChange={handleFileUpload}
                      disabled={isSubmitting}
                    />
                    <Button 
                      type="button" 
                      variant="outline" 
                      className="mt-2"
                      disabled={isSubmitting}
                      onClick={() => document.getElementById('file-upload')?.click()}
                    >
                      Choose Files
                    </Button>
                  </label>
                </div>
                <p className="text-xs text-gray-500 mt-2">
                  PNG, JPG, PDF, ZIP up to 10MB each
                </p>
              </div>
            </div>

            {/* Display uploaded files */}
            {formData.attachments.length > 0 && (
              <div className="space-y-2">
                <Label>Uploaded Files:</Label>
                <div className="space-y-2">
                  {formData.attachments.map((file, index) => (
                    <div key={index} className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <File className="h-5 w-5 text-gray-500" />
                        <div>
                          <p className="text-sm font-medium text-gray-900 dark:text-white">
                            {file.name}
                          </p>
                          <p className="text-xs text-gray-500">
                            {formatFileSize(file.size)}
                          </p>
                        </div>
                      </div>
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        onClick={() => removeFile(index)}
                        disabled={isSubmitting}
                        className="text-red-500 hover:text-red-700"
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Hidden field for backend compatibility */}
          <div style={{ display: 'none' }}>
            <Select value={formData.type} onValueChange={(value) => handleSelectChange('type', value)}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="VULNERABILITY">Vulnerability</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="flex justify-end space-x-4">
            <Button 
              variant="outline" 
              type="button" 
              onClick={handleSaveDraft}
              disabled={isSubmitting}
            >
              {isSubmitting ? 'Saving...' : 'Save as Draft'}
            </Button>
            <Button 
              type="submit" 
              className="bg-blue-600 hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
              disabled={isSubmitting}
            >
              {isSubmitting ? (
                <>
                  <svg className="animate-spin -ml-1 mr-3 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Submitting Report...
                </>
              ) : (
                'Submit Report'
              )}
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityForm;